//Initialize the map
var map = L.map('divMap').setView(startLatLong, startZoom);

//Create the map
L.tileLayer('http://tile.cloudmade.com/f19d6045b0ac4f68bc75b707ac14e3dd/997/256/{z}/{x}/{y}.png', {
	maxZoom: 18,
	attribution: 'Odin'
}).addTo(map);


//Code to add images of scanned maps as overlay:
//they are layers already, but adding them to this layer lets them be turned off
var layerScans = new L.LayerGroup(); 
var layerUsgs = new L.LayerGroup(); 

var imageBoundsMarcy = [[44.187769661, -74.083110226], [44.071878201, -73.821816444]];
var imageBoundsSouth = [[44.16605162, -73.928969307], [44.05045995529445, -73.705480129]];
var imageBoundsMarcyUsgs = [[44.125, -74.0], [44.0, -73.75]];

var layerMarcy = L.imageOverlay("<%= asset_path('maps/marcy.png') %>", imageBoundsMarcy, {zIndex:-10});
var layerSouth = L.imageOverlay("<%= asset_path('maps/south.png') %>", imageBoundsSouth);
var layerMarcyUsgs = L.imageOverlay("<%= asset_path('maps/marcyusgs.png') %>", imageBoundsMarcyUsgs);

layerScans.addLayer(layerMarcy,true);
layerScans.addLayer(layerSouth,true);
layerUsgs.addLayer(layerMarcyUsgs,true);
//I can't figure out how to make these not cover the routes if selected after load
//If you want to use them enable them on by default in that section below


//layerScans.bringToBack();
//layerSouth.bringToBack();
//layerMarcyUsgs.bringToBack();
//layerSouth.setOpacity(0.8);



//Create and initilize layers
//There are two kinds of layers.
//Baser layers use radio buttons (only one can be selected)
//overlays use check boxes (any number can be selected)

var layerDefault=""; //a way to get the plain leaflet layer back, probaly produces errors but works

//add all base layers here:
var baseLayers = {
	"None": layerDefault,
	"OpenStreetMap (trails)": L.tileLayer.provider('OpenStreetMap.Mapnik'),
	"OpenStreetMap German Style (trails)": L.tileLayer.provider('OpenStreetMap.DE'),
	"Thunderforest OpenCycleMap (contours)": L.tileLayer.provider('Thunderforest.OpenCycleMap'),
	"MapQuest Aerial (sat)": L.tileLayer.provider('MapQuestOpen.Aerial'),
	"Stamen Terrain (terrain)": L.tileLayer.provider('Stamen.Terrain'),
	"Esri WorldImagery (sat)": L.tileLayer.provider('Esri.WorldImagery'),
	"Scanned": layerScans,
	"USGS": layerUsgs,

};

//create overlay layers as layergroups so we can add markers to them:
var layerListSummits = new L.LayerGroup();
var layerSummits     = new L.LayerGroup();
var layerTrailheads  = new L.LayerGroup();
var layerLienTos     = new L.LayerGroup();
var layerTents       = new L.LayerGroup();
var layerViewpoints  = new L.LayerGroup();
var layerTrails      = new L.LayerGroup();
var layerJcts        = new L.LayerGroup();
var layerOthers      = new L.LayerGroup();

//Add overlay layers to map, these will be on by default:
if (listOn) {layerListSummits.addTo(map);}
if (summitOn) {layerSummits.addTo(map);}
if (trailheadOn) {layerTrailheads.addTo(map);}
if (leantoOn) {layerLienTos.addTo(map);}
if (tentOn) {layerTents.addTo(map);}
if (viewOn) {layerViewpoints.addTo(map);}
if (trailOn) {layerTrails.addTo(map);}
if (jctOn) {layerJcts.addTo(map);}
if (otherOn) {layerOthers.addTo(map);}
if (scannedOn) {layerScans.addTo(map);}
if (usgsOn) {layerUsgs.addTo(map);}


//list all overlay layers here:
var overlayMaps = {
	"List Summits": layerListSummits,
	"Other Summits": layerSummits,
	"Trailheads": layerTrailheads,
	"Lien-Tos": layerLienTos,
	"Tent Sites": layerTents,
	"Viewpoints": layerViewpoints,
	"Trails": layerTrails,
	"Jcts": layerJcts,
	"Other": layerOthers,
	
	
};

//create actual layer control box
L.control.layers(baseLayers , overlayMaps).addTo(map); //the layer control box




//Create the icon class for markers
//Might make new class for highlighted icons so color can extend further

var MainIcon = L.Icon.extend({
	options: {
	//shadowUrl: 'leaf-shadow.png',

	//these are x,y pairs: [0,0] is upper left, [16,32] is center bottom (assuming 32x32 icon size)
	iconSize:	 [32, 32], // size of the icon
	//shadowSize:   [50, 64], // size of the shadow
	//Changed this to be bottom center:
	iconAnchor:   [16, 32], // point of the icon which will correspond to marker's location
	//shadowAnchor: [4, 62],  // the same for the shadow
	popupAnchor:  [0, -32] // point from which the popup should open relative to the iconAnchor
	}
});

var JctIcon = L.Icon.extend({ //smaller junction icon
	options: {
	iconSize:	 [6, 6], // size of the icon
	iconAnchor:   [3, 3], // point of the icon which will correspond to marker's location
	popupAnchor:  [0, -3] // point from which the popup should open relative to the iconAnchor
	}
});


//Set URL for individual markers
var	iconListSummit = new MainIcon({iconUrl: customIcon}),
		iconSummit = new MainIcon({iconUrl: "<%= asset_path('icons/peak.png') %>"}),
		iconTent = new MainIcon({iconUrl: "<%= asset_path('icons/tent2.png') %>"}), //this icon should have some outline to stand out on green
		iconLeanto = new MainIcon({iconUrl: "<%= asset_path('icons/leanto5.png') %>"}),
		iconTrailhead = new MainIcon({iconUrl: "<%= asset_path('icons/parkingsign1.png') %>"}),
		iconJct = new JctIcon({iconUrl: "<%= asset_path('icons/jct.png') %>"}),
		iconTemp = new JctIcon({iconUrl: "<%= asset_path('icons/temppointer.png') %>"}),
		iconOther = new JctIcon({iconUrl: "<%= asset_path('icons/temppointer.png') %>"}),
		
		iconListSummitRed = new MainIcon({iconUrl: "<%= asset_path('icons/46red.png') %>"}),
		iconSummitRed = new MainIcon({iconUrl: "<%= asset_path('icons/peakred.png') %>"}),
		iconTentRed = new MainIcon({iconUrl: "<%= asset_path('icons/tent2red.png') %>"}),
		iconLeantoRed = new MainIcon({iconUrl: "<%= asset_path('icons/leanto5red.png') %>"}),
		iconTrailheadRed = new MainIcon({iconUrl: "<%= asset_path('icons/parkingsign1red.png') %>"}),
		iconJctRed = new MainIcon({iconUrl: "<%= asset_path('icons/jctred.png') %>"});




var popuptext;

function generatePoiPopup(lat, long, type, name, height, park, id)
{
	var text = '';
	
	text += id+" &nbsp;&nbsp;&nbsp;"+name+" &nbsp;&nbsp;&nbsp;"+"<a href='../pois/"+id+"/edit'>Edit</a><br>";
	text += height + " ft &nbsp;&nbsp;&nbsp;"+lat + ", " + long;
	text += "<form name='poi"+id+"'> ";
	text += "<table><tr><td><label><input type='radio' name='poiType' value='List Summit'>List</label</td> ";
	text += "           <td><label><input type='radio' name='poiType' value='Summit'>Summit</label</td> ";
	text += "           <td><label><input type='radio' name='poiType' value='Trailhead'>Trailhead</label</td> ";
	text += "           <td><label><input type='radio' name='poiType' value='Jct'>Jct</label</td></tr> ";
	text += "       <tr><td><label><input type='radio' name='poiType' value='Leanto'>Leanto</label</td> ";
	text += "           <td><label><input type='radio' name='poiType' value='Camp'>Camp</label</td> ";
	text += "           <td><label><input type='radio' name='poiType' value='View'>View</label</td> ";
	text += "           <td><label><input type='radio' name='poiType' value='Other'>Other</label</td></tr></table> ";
	text += "<table><tr><td>Lat, Long: </td><td><input type='text' name='latBox' style='width:7em' value='"+lat+"'></td> ";
	text += "           <td><input type='text' name='longBox' style='width:7em' value='"+long+"'></td></tr> ";
	text += "       <tr><td>Height: </td><td><input type='text' name='heightBox' style='width:7em' value='"+height+"'></td></tr> ";
	text += "       <tr><td>Name: </td><td><input type='text' name='nameBox' style='width:7em' value='"+name+"'></td></tr> ";
	text += "<tr><td><input type='button' value='Save' onclick='savePoi("+id+")'><td>";
	text += "    <td><input type='button' value='Delete' onclick='deletePoi("+id+")'><td></tr>";
	text += "</table>";
	
	
	
	
	
	
	return text;
	
}



//Add items from POI arrays
//Instantiuated in poi.js

//Add markers of various types:
var markerListSummits = [];
for (i = 0; i <= lstListSummits.length-1; i++) {//add list summits
	popuptext = generatePoiPopup(lstListSummits[i][0],lstListSummits[i][1],lstListSummits[i][2],lstListSummits[i][3],lstListSummits[i][4],lstListSummits[i][5],lstListSummits[i][6]);
		
	markerListSummits[i] = L.marker([lstListSummits[i][0], lstListSummits[i][1]], {
		id: i, //id is used when marker is clicked
		icon: iconListSummit, 
		title: lstListSummits[i][3]
	}).bindPopup(popuptext);
	layerListSummits.addLayer(markerListSummits[i]);	
	
	markerListSummits[i].on('click', function (e) {
		clickMarker(e, "ListSummit"); //the function that actually does stuff on click
	});
}

var markerSummits = [];
for (i = 0; i <= lstSummits.length-1; i++) {//add regular summits
	popuptext =  generatePoiPopup(lstSummits[i][0],lstSummits[i][1],lstSummits[i][2],lstSummits[i][3],lstSummits[i][4],lstSummits[i][5],lstSummits[i][6]);
	
	markerSummits[i] = L.marker([lstSummits[i][0], lstSummits[i][1]], {
		id: i,
		icon: iconSummit,
		title: lstSummits[i][3],
		opacity: 0.7
	}).bindPopup(popuptext);
	layerSummits.addLayer(markerSummits[i]);		
	
	markerSummits[i].on('click', function (e) {
		clickMarker(e, "Summit");
	});
}

var markerTrailheads = [];
for (i = 0; i <= lstTrailheads.length-1; i++) {//add trailheads
	popuptext =  generatePoiPopup(lstTrailheads[i][0],lstTrailheads[i][1],lstTrailheads[i][2],lstTrailheads[i][3],lstTrailheads[i][4],lstTrailheads[i][5],lstTrailheads[i][6]);
	
	markerTrailheads[i] = L.marker([lstTrailheads[i][0], lstTrailheads[i][1]], {
		id: i,
		icon: iconTrailhead,
		title: lstTrailheads[i][3]
	}).bindPopup(popuptext);
	layerTrailheads.addLayer(markerTrailheads[i]);		
	
	markerTrailheads[i].on('click', function (e) {
		clickMarker(e, "Trailhead");
	});	
}

var markerTents = [];
for (i = 0; i <= lstTents.length-1; i++) {//add tenting sites
	popuptext =  generatePoiPopup(lstTents[i][0],lstTents[i][1],lstTents[i][2],lstTents[i][3],lstTents[i][4],lstTents[i][5],lstTents[i][6]);
	
	markerTents[i] = L.marker([lstTents[i][0], lstTents[i][1]], {
		id: i,
		icon: iconTent,
		title: lstTents[i][3]
	}).bindPopup(popuptext);
	layerTents.addLayer(markerTents[i]);		
	
	markerTents[i].on('click', function (e) {
		clickMarker(e, "Tent");
	});	
}

var markerLeantos = [];
for (i = 0; i <= lstLeantos.length-1; i++) {//add leantos
	popuptext =  generatePoiPopup(lstLeantos[i][0],lstLeantos[i][1],lstLeantos[i][2],lstLeantos[i][3],lstLeantos[i][4],lstLeantos[i][5],lstLeantos[i][6]);
	
	markerLeantos[i] = L.marker([lstLeantos[i][0], lstLeantos[i][1]], {
		id: i,
		icon: iconLeanto,
		title: lstLeantos[i][3]
	}).bindPopup(popuptext);
	layerLienTos.addLayer(markerLeantos[i]);	
	
	markerLeantos[i].on('click', function (e) {
		clickMarker(e, "Leanto");
	});		
}

var markerJcts = [];
for (i = 0; i <= lstJcts.length-1; i++) {//add junctions
	popuptext =  generatePoiPopup(lstJcts[i][0],lstJcts[i][1],lstJcts[i][2],lstJcts[i][3],lstJcts[i][4],lstJcts[i][5],lstJcts[i][6]);
	
	markerJcts[i] = L.marker([lstJcts[i][0], lstJcts[i][1]], {
		id: i,
		icon: iconJct,
		title: lstJcts[i][3]
	}).bindPopup(popuptext);
	layerJcts.addLayer(markerJcts[i]);	
	
	markerJcts[i].on('click', function (e) {
		clickMarker(e, "Jct");
	});		
}

var markerOthers = [];
for (i = 0; i <= lstOthers.length-1; i++) {//add others
	popuptext =  generatePoiPopup(lstOthers[i][0],lstOthers[i][1],lstOthers[i][2],lstOthers[i][3],lstOthers[i][4],lstOthers[i][5],lstOthers[i][6]);
	
	markerOthers[i] = L.marker([lstOthers[i][0], lstOthers[i][1]], {
		id: i,
		icon: iconOther,
		title: lstOthers[i][3]
	}).bindPopup(popuptext);
	layerOthers.addLayer(markerOthers[i]);	
	
	markerOthers[i].on('click', function (e) {
		clickMarker(e, "Other");
	});		
}


L.control.scale().addTo(map); //the distance scale

map.on('mousemove', function(e) { //puts the lat long in the footer, helps while testing
	var temp = e.latlng.lat + "; " + e.latlng.lng;
	document.getElementById('divFooter').innerHTML=temp;
})

map.on('click', function(e) { //click for lat long in sidebar
	var rnd = 6;
	var temp = (e.latlng.lat).toFixed(rnd) + ", " + (e.latlng.lng).toFixed(rnd);
	
	document.getElementById('divRightBody').innerHTML += "<br>"+temp;
	if (routeMode) {clickRoute(e.latlng.lat, e.latlng.lng);}
})
